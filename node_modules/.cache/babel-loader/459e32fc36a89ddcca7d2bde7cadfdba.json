{"ast":null,"code":"var _jsxFileName = \"/home/futit/workspace/curso-react/clima-app/src/components/Clima.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Clima = _ref => {\n  _s();\n\n  let {\n    region\n  } = _ref;\n  const [dataResponse, setDataResponse] = useState({\n    weather: \"\",\n    temp: 0,\n    temp_min: 0,\n    temp_max: 0,\n    pressure: 0,\n    humidity: 0,\n    visibility: 0,\n    windsSpeed: 0\n  });\n\n  const round = num => {\n    return Math.round(num * 100) / 100;\n  };\n\n  useEffect(() => {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?${region}&appid=12f79219938e1bf1c3a59af0fca96d62`).then(response => response.json()).then(data => {\n      const obj = {\n        weather: data.weather[0].main,\n        temp: round(data.main.temp - 273.15),\n        pressure: data.main.pressure,\n        temp_min: round(data.main.temp_min - 273.15),\n        temp_max: round(data.main.temp_max - 273.15),\n        humidity: data.main.humidity,\n        visibility: data.visibility,\n        windSpeed: data.wind.speed\n      };\n      setDataResponse(state => ({ ...state,\n        weather: obj.weather,\n        temp: obj.temp,\n        temp_min: obj.temp_min,\n        temp_max: obj.temp_max,\n        pressure: obj.pressure,\n        humidity: obj.humidity,\n        visibility: obj.visibility,\n        windSpeed: obj.windSpeed\n      }));\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [region]);\n  console.log(\"Data Response \", dataResponse);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [dataResponse.weather, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), \"Temp: \", dataResponse.temp, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), \"Min: \", dataResponse.temp_min, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), \"Max: \", dataResponse.temp_max, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), \"Pressure: \", dataResponse.pressure, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), \"Humidity: \", dataResponse.humidity, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), \"Visibility: \", dataResponse.visibility, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), \"Wind Speed: \", dataResponse.windSpeed]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Clima, \"sucS6dIpRVYBGxTupEjA2cqzAmk=\");\n\n_c = Clima;\nexport default Clima;\n\nvar _c;\n\n$RefreshReg$(_c, \"Clima\");","map":{"version":3,"sources":["/home/futit/workspace/curso-react/clima-app/src/components/Clima.js"],"names":["useState","useEffect","Clima","region","dataResponse","setDataResponse","weather","temp","temp_min","temp_max","pressure","humidity","visibility","windsSpeed","round","num","Math","fetch","then","response","json","data","obj","main","windSpeed","wind","speed","state","catch","err","console","log"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,KAAK,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;AAC5B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC;AAAEM,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,IAAI,EAAC,CAApB;AAAuBC,IAAAA,QAAQ,EAAC,CAAhC;AAAmCC,IAAAA,QAAQ,EAAC,CAA5C;AAA+CC,IAAAA,QAAQ,EAAE,CAAzD;AAA4DC,IAAAA,QAAQ,EAAC,CAArE;AAAwEC,IAAAA,UAAU,EAAC,CAAnF;AAAsFC,IAAAA,UAAU,EAAC;AAAjG,GAAD,CAAhD;;AAEA,QAAMC,KAAK,GAAIC,GAAD,IAAS;AACnB,WAAOC,IAAI,CAACF,KAAL,CAAWC,GAAG,GAAG,GAAjB,IAAwB,GAA/B;AACH,GAFD;;AAGAd,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,KAAK,CACF,kDAAiDd,MAAO,yCADtD,CAAL,CAGGe,IAHH,CAGSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHtB,EAIGF,IAJH,CAISG,IAAD,IAAU;AACd,YAAMC,GAAG,GAAG;AACVhB,QAAAA,OAAO,EAAEe,IAAI,CAACf,OAAL,CAAa,CAAb,EAAgBiB,IADf;AAEVhB,QAAAA,IAAI,EAAEO,KAAK,CAACO,IAAI,CAACE,IAAL,CAAUhB,IAAV,GAAgB,MAAjB,CAFD;AAGVG,QAAAA,QAAQ,EAAEW,IAAI,CAACE,IAAL,CAAUb,QAHV;AAIVF,QAAAA,QAAQ,EAAEM,KAAK,CAACO,IAAI,CAACE,IAAL,CAAUf,QAAV,GAAqB,MAAtB,CAJL;AAKVC,QAAAA,QAAQ,EAAEK,KAAK,CAACO,IAAI,CAACE,IAAL,CAAUd,QAAV,GAAoB,MAArB,CALL;AAMVE,QAAAA,QAAQ,EAAEU,IAAI,CAACE,IAAL,CAAUZ,QANV;AAOVC,QAAAA,UAAU,EAAES,IAAI,CAACT,UAPP;AAQVY,QAAAA,SAAS,EAAEH,IAAI,CAACI,IAAL,CAAUC;AARX,OAAZ;AAUArB,MAAAA,eAAe,CAACsB,KAAK,KAAK,EACtB,GAAGA,KADmB;AAEtBrB,QAAAA,OAAO,EAAEgB,GAAG,CAAChB,OAFS;AAGtBC,QAAAA,IAAI,EAAEe,GAAG,CAACf,IAHY;AAItBC,QAAAA,QAAQ,EAAEc,GAAG,CAACd,QAJQ;AAKtBC,QAAAA,QAAQ,EAACa,GAAG,CAACb,QALS;AAMtBC,QAAAA,QAAQ,EAAEY,GAAG,CAACZ,QANQ;AAOtBC,QAAAA,QAAQ,EAACW,GAAG,CAACX,QAPS;AAQtBC,QAAAA,UAAU,EAAEU,GAAG,CAACV,UARM;AAStBY,QAAAA,SAAS,EAAEF,GAAG,CAACE;AATO,OAAL,CAAN,CAAf;AAWD,KA1BH,EA2BGI,KA3BH,CA2BUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KA7BH;AA8BD,GA/BQ,EA+BN,CAAC1B,MAAD,CA/BM,CAAT;AAgCA2B,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B3B,YAA9B;AAEA,sBACE;AAAA,eACGA,YAAY,CAACE,OADhB,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF,YAGSF,YAAY,CAACG,IAHtB,eAIE;AAAA;AAAA;AAAA;AAAA,YAJF,WAKQH,YAAY,CAACI,QALrB,eAME;AAAA;AAAA;AAAA;AAAA,YANF,WAOQJ,YAAY,CAACK,QAPrB,eAQE;AAAA;AAAA;AAAA;AAAA,YARF,gBASaL,YAAY,CAACM,QAT1B,eAUE;AAAA;AAAA;AAAA;AAAA,YAVF,gBAWaN,YAAY,CAACO,QAX1B,eAYE;AAAA;AAAA;AAAA;AAAA,YAZF,kBAaeP,YAAY,CAACQ,UAb5B,eAcE;AAAA;AAAA;AAAA;AAAA,YAdF,kBAeeR,YAAY,CAACoB,SAf5B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA3DD;;GAAMtB,K;;KAAAA,K;AA6DN,eAAeA,KAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst Clima = ({ region }) => {\n  const [dataResponse, setDataResponse] = useState({ weather: \"\", temp:0, temp_min:0, temp_max:0, pressure: 0, humidity:0, visibility:0, windsSpeed:0 });\n\n  const round = (num) => {\n      return Math.round(num * 100) / 100\n  }\n  useEffect(() => {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?${region}&appid=12f79219938e1bf1c3a59af0fca96d62`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const obj = {\n          weather: data.weather[0].main,\n          temp: round(data.main.temp- 273.15),\n          pressure: data.main.pressure,\n          temp_min: round(data.main.temp_min - 273.15),\n          temp_max: round(data.main.temp_max -273.15),\n          humidity: data.main.humidity,\n          visibility: data.visibility,\n          windSpeed: data.wind.speed\n        };\n        setDataResponse(state => ({\n            ...state,\n            weather: obj.weather,\n            temp: obj.temp,\n            temp_min: obj.temp_min,\n            temp_max:obj.temp_max,\n            pressure: obj.pressure,\n            humidity:obj.humidity,\n            visibility: obj.visibility,\n            windSpeed: obj.windSpeed\n        }))\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [region]);\n  console.log(\"Data Response \", dataResponse);\n\n  return (\n    <div>\n      {dataResponse.weather}\n      <br/>\n      Temp: {dataResponse.temp}\n      <br/>\n      Min: {dataResponse.temp_min}\n      <br/>\n      Max: {dataResponse.temp_max}\n      <br/>\n      Pressure: {dataResponse.pressure}\n      <br/>\n      Humidity: {dataResponse.humidity}\n      <br/>\n      Visibility: {dataResponse.visibility}\n      <br />\n      Wind Speed: {dataResponse.windSpeed}\n    </div>\n  );\n};\n\nexport default Clima;\n"]},"metadata":{},"sourceType":"module"}