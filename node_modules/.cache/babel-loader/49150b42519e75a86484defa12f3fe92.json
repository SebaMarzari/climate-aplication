{"ast":null,"code":"var _jsxFileName = \"/home/futit/workspace/curso-react/clima-app/src/components/DailyForcast.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Div from \"./Div\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DailyForcast = _ref => {\n  _s();\n\n  let {\n    region\n  } = _ref;\n  const [dataResponse, setDataResponse] = useState([]);\n\n  const round = num => {\n    return Math.round(num * 100) / 100;\n  };\n\n  useEffect(() => {\n    fetch(`http://api.openweathermap.org/data/2.5/forecast?${region}&appid=12f79219938e1bf1c3a59af0fca96d62`).then(response => response.json()).then(data => {\n      const obj = [];\n      var startDate = moment(new Date()).add(1, \"day\").format(\"DD-MM-YYYY\");\n      var day = moment(new Date()).add(1, \"day\").format(\"DD-MM-YYYY\");\n      var currentHour = moment(new Date()).format(\"hh:mm a\");\n\n      for (var i = 0; data.list.length; i++) {\n        day = moment(data.list[i].dt * 1e3).format(\"DD-MM-YYYY\");\n\n        if (day === startDate) {\n          obj.push({\n            day: day,\n            weather: data.list[i].weather[0].main,\n            icon: data.list[i].weather[0].icon,\n            pressure: data.list[i].main.pressure,\n            temp_min: round(data.list[i].main.temp_min - 273.15),\n            temp_max: round(data.list[i].main.temp_max - 273.15),\n            humidity: data.list[i].main.humidity,\n            visibility: data.list[i].visibility,\n            windSpeed: data.list[i].wind.speed\n          });\n          startDate = moment(startDate, 'DD-MM-YYYY').add(1, \"day\").format('DD-MM-YYYY');\n          setDataResponse({ ...dataResponse,\n            obj\n          });\n        }\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [region]);\n\n  if (JSON.stringify(dataResponse).length > 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dataResponse !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Div, {\n          padding: 5,\n          dataResponse: dataResponse,\n          num: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Div, {\n          padding: 5,\n          dataResponse: dataResponse,\n          num: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Div, {\n          padding: 5,\n          dataResponse: dataResponse,\n          num: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Div, {\n          padding: 5,\n          dataResponse: dataResponse,\n          num: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Div, {\n          padding: 5,\n          dataResponse: dataResponse,\n          num: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 41\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 14\n    }, this);\n  }\n};\n\n_s(DailyForcast, \"KYq8BDEj4F+X3Rt5y+pDD09aJaY=\");\n\n_c = DailyForcast;\nexport default DailyForcast;\n\nvar _c;\n\n$RefreshReg$(_c, \"DailyForcast\");","map":{"version":3,"sources":["/home/futit/workspace/curso-react/clima-app/src/components/DailyForcast.js"],"names":["useState","useEffect","moment","Div","DailyForcast","region","dataResponse","setDataResponse","round","num","Math","fetch","then","response","json","data","obj","startDate","Date","add","format","day","currentHour","i","list","length","dt","push","weather","main","icon","pressure","temp_min","temp_max","humidity","visibility","windSpeed","wind","speed","catch","err","console","log","JSON","stringify","undefined","display"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Div from \"./Div\";\n\nconst DailyForcast = ({ region }) => {\n  const [dataResponse, setDataResponse] = useState([]);\n\n  const round = (num) => {\n    return Math.round(num * 100) / 100;\n  };\n  useEffect(() => {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/forecast?${region}&appid=12f79219938e1bf1c3a59af0fca96d62`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const obj = [];\n        var startDate = moment(new Date()).add(1, \"day\").format(\"DD-MM-YYYY\");\n        var day = moment(new Date()).add(1, \"day\").format(\"DD-MM-YYYY\");\n        var currentHour = moment(new Date()).format(\"hh:mm a\")\n        for (var i = 0; data.list.length; i++) {\n          day = moment(data.list[i].dt * 1e3).format(\"DD-MM-YYYY\");\n          if (day === startDate) {\n            obj.push({\n              day: day,\n              weather: data.list[i].weather[0].main,\n              icon: data.list[i].weather[0].icon,\n              pressure: data.list[i].main.pressure,\n              temp_min: round(data.list[i].main.temp_min - 273.15),\n              temp_max: round(data.list[i].main.temp_max - 273.15),\n              humidity: data.list[i].main.humidity,\n              visibility: data.list[i].visibility,\n              windSpeed: data.list[i].wind.speed,\n            });\n            startDate = moment(startDate, 'DD-MM-YYYY').add(1, \"day\").format('DD-MM-YYYY')\n            setDataResponse({ ...dataResponse, obj });\n          }\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [region]);\n\n  if (JSON.stringify(dataResponse).length > 2){\n    return (\n        <div>\n          {dataResponse !== undefined ? <div style={{ display: \"flex\" }}>\n            <Div padding={5} dataResponse={dataResponse} num={0} />\n            <Div padding={5} dataResponse={dataResponse} num={1} />\n            <Div padding={5} dataResponse={dataResponse} num={2} />\n            <Div padding={5} dataResponse={dataResponse} num={3} />\n            <Div padding={5} dataResponse={dataResponse} num={4} />\n          </div> : null}\n        </div>\n      );\n  } else {\n      return(<div></div>);\n  }\n};\n\nexport default DailyForcast;\n"]},"metadata":{},"sourceType":"module"}